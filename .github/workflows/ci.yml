name: Build and Test ATROP

on:
  push:
    paths:
      - 'Makefile'
      - 'daemon/**'
      - 'sdk/**'
      - 'test/**'
      - 'dev-requirements.txt'
      - '.github/workflows/ci.yml'
  pull_request:
    paths:
      - 'Makefile'
      - 'daemon/**'
      - 'sdk/**'
      - 'test/**'
      - 'dev-requirements.txt'
      - '.github/workflows/ci.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt update && sudo apt install -y \
            build-essential cmake g++ make protobuf-compiler protobuf-compiler-grpc libgtest-dev python3-pip

      - name: Setup vcpkg and install C++ dependencies
        run: |
          rm -rf vcpkg
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install nlohmann-json yaml-cpp spdlog gtest
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(pwd)/vcpkg/installed/x64-linux/share" >> $GITHUB_ENV

      - name: Clean build directory
        run: rm -rf build

      - name: Build daemon and SDK
        env:
          VCPKG_TOOLCHAIN_FILE: ${{ env.VCPKG_TOOLCHAIN_FILE }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          cmake --build . -- -j$(nproc)

      - name: Install Python dependencies
        run: |
          pip install -r dev-requirements.txt
          pip install pyyaml python-json-logger

      - name: Install SDK in editable mode
        run: pip install -e ./sdk/python

      - name: Print Python sys.path and import check
        run: |
          export PYTHONPATH=$(pwd)/sdk/python
          echo "Python Path:"
          python -c "import sys; print('\n'.join(sys.path))"
          python -c "import atrop_sdk; print(' SDK Import Successful:', atrop_sdk)"

      - name: Check tool versions (optional)
        run: make check-versions || echo " make check-versions not available"

      - name: Run Python unit tests
        env:
          PYTHONPATH: ./sdk/python/src
        run: |
          echo "=== Running Python Unit Tests ==="
          pytest test/unit/ -v || echo " Some tests failed, but continuing for debug"
          echo "=== Python Unit Tests Completed ==="

      - name: Generate gRPC stubs
        run: make generate-grpc-stubs || echo " gRPC stub generation not available"

      - name: Inspect Build Output
        run: |
          file build/* || true
          ls -R sdk/grpc/build_py || true
          ls -R sdk/grpc/build_cpp || true

  python-lint:
    name: 🧼 Python Lint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install ruff
        run: pip install ruff

      - name: Run ruff on all Python dirs
        run: |
          echo "🔍 Running ruff checks..."
          set -e
          ruff check daemon/ || echo "❌ daemon/ failed"
          ruff check sdk/ || echo "❌ sdk/ failed"
          ruff check tools/ || echo "❌ tools/ failed"
          ruff check test/ || echo "❌ test/ failed"
          ruff check models/ || echo "❌ models/ failed"

  cpp-lint:
    name: 🧼 C++ Lint (clang-tidy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Install clang-tidy and build dependencies
        run: |
          sudo apt update && sudo apt install -y \
            clang-tidy \
            build-essential \
            cmake \
            g++

      - name: Setup vcpkg and install C++ dependencies
        run: |
          rm -rf vcpkg
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install nlohmann-json yaml-cpp spdlog gtest
          echo "VCPKG_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

      - name: Generate compilation database
        env:
          VCPKG_TOOLCHAIN_FILE: ${{ env.VCPKG_TOOLCHAIN_FILE }}
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          make -j$(nproc)

      - name: Create .clang-tidy config
        run: |
          cat > .clang-tidy << EOF
          Checks: >
            -*,
            bugprone-*,
            clang-analyzer-*,
            cppcoreguidelines-*,
            modernize-*,
            performance-*,
            portability-*,
            readability-*,
            -modernize-use-trailing-return-type,
            -cppcoreguidelines-avoid-magic-numbers,
            -readability-magic-numbers,
            -cppcoreguidelines-pro-bounds-pointer-arithmetic,
            -cppcoreguidelines-pro-bounds-array-to-pointer-decay
          WarningsAsErrors: ''
          HeaderFilterRegex: '(daemon|sdk)/.*\.(h|hpp)$'
          FormatStyle: none
          EOF

      - name: Run clang-tidy on daemon/control_plane
        run: |
          echo "🔍 Running clang-tidy on daemon/control_plane..."
          find daemon/control_plane -name '*.cpp' -type f | while read -r file; do
            echo "Checking: $file"
            clang-tidy "$file" \
              -p build \
              --config-file=.clang-tidy \
              --quiet || echo "⚠️ Issues found in $file"
          done

      - name: Run clang-tidy on daemon/ipc
        run: |
          echo "🔍 Running clang-tidy on daemon/ipc..."
          if [ -d "daemon/ipc" ]; then
            find daemon/ipc -name '*.cpp' -type f | while read -r file; do
              echo "Checking: $file"
              clang-tidy "$file" \
                -p build \
                --config-file=.clang-tidy \
                --quiet || echo "⚠️ Issues found in $file"
            done
          else
            echo "ℹ️ daemon/ipc directory not found, skipping"
          fi

      - name: Run clang-tidy on SDK
        run: |
          echo "🔍 Running clang-tidy on SDK..."
          find sdk/c++ -name '*.cpp' -type f | while read -r file; do
            echo "Checking: $file"
            clang-tidy "$file" \
              -p build \
              --config-file=.clang-tidy \
              --quiet || echo "⚠️ Issues found in $file"
          done

      - name: Summary
        run: |
          echo "✅ clang-tidy analysis completed"
          echo "Note: Warnings are reported but don't fail the build"

  docker-lint:
    name: 🐳 Dockerfile Lint & Build Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: 🧪 Debug check for .hadolint.yaml
        run: |
          echo "Listing root files:"
          ls -la .
          echo "Printing .hadolint.yaml:"
          cat .hadolint.yaml || echo "⚠️ Not found"

      - name: 🔍 Lint Dockerfile with hadolint + config
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/mnt" \
            hadolint/hadolint \
            hadolint /mnt/Dockerfile --config /mnt/.hadolint.yaml --no-fail || echo "⚠️ Dockerfile linting failed"

      - name: 🛠 Test Docker Build
        run: docker build -t atrop-dev . || echo "⚠️ Docker build failed"

  python-test:
    name: 🧪 Python Unit Tests
    runs-on: ubuntu-latest
    needs: python-lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pyyaml

      - name: Run pytest on unit tests
        env:
          PYTHONPATH: ./sdk/python/src
        run: |
          echo "=== Running Python Unit Tests ==="
          pytest test/unit/ -v || echo "❌ Some tests failed, but continuing for debug"
          echo "=== Python Unit Tests Completed ==="

      - name: ✅ Valid JSON config load
        run: python -m pytest test/unit/sdk/test_config_loader.py -k "test_valid_json_load" || echo "⚠️ Test not found"

      - name: ✅ Valid YAML config load
        run: python -m pytest test/unit/sdk/test_config_loader.py -k "test_valid_yaml_load" || echo "⚠️ Test not found"

      - name: ⚠️ Missing required field
        run: python -m pytest test/unit/sdk/test_config_loader.py -k "test_missing_required_field" || echo "⚠️ Test not found"

      - name: ❌ Invalid format file
        run: python -m pytest test/unit/sdk/test_config_loader.py -k "test_invalid_json_format" || echo "⚠️ Test not found"

      - name: 🌱 Environment variable override
        if: ${{ always() }}
        run: python -m pytest test/unit/sdk/test_config_loader.py -k "test_env_override" || echo "⚠️ Test not found"

  cpp-test:
    name: 🧪 C++ Unit Tests
    runs-on: ubuntu-latest
    needs: cpp-lint
    steps:
      - uses: actions/checkout@v3

      - name: Setup vcpkg and install C++ dependencies
        run: |
          rm -rf vcpkg
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install nlohmann-json yaml-cpp spdlog gtest
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(pwd)/vcpkg/installed/x64-linux/share" >> $GITHUB_ENV

      - name: Install system build tools
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libgtest-dev

      - name: Build and run C++ tests
        env:
          VCPKG_TOOLCHAIN_FILE: ${{ env.VCPKG_TOOLCHAIN_FILE }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          make -j$(nproc)

          echo "=== Running CTest ==="
          ctest --output-on-failure --verbose --timeout 30

          echo "=== Running individual test executables ==="
          if [ -f test/c++/test_sample ]; then
            echo "Running test_sample..."
            timeout 10s ./test/c++/test_sample || echo "❌ test_sample failed or timed out"
          fi

          if [ -f test/c++/test_config_loader ]; then
            echo "Running test_config_loader..."
            timeout 10s ./test/c++/test_config_loader || echo "❌ test_config_loader failed or timed out"
          fi

          if [ -f test/c++/test_handlers ]; then
            echo "Running test_handlers..."
            timeout 10s ./test/c++/test_handlers || echo "❌ test_handlers failed or timed out"
          fi

  test-logger:
    name: 🧪 Logger Unit Tests
    runs-on: ubuntu-latest
    needs: cpp-test
    steps:
      - uses: actions/checkout@v3

      - name: Setup vcpkg and install C++ dependencies
        run: |
          rm -rf vcpkg
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install spdlog gtest yaml-cpp nlohmann-json
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(pwd)/vcpkg/installed/x64-linux/share" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: pip3 install pytest python-json-logger

      - name: Make daemon a Python package in CI
        run: find daemon -type d -exec touch {}/__init__.py \;

      - name: Debug Python environment & files
        env:
          PYTHONPATH: ./daemon:./sdk/python/src
        run: |
          echo "PYTHONPATH=$PYTHONPATH"
          python -c "import sys; print(sys.path)"
          ls -l daemon
          ls -l daemon/common

      - name: Run Python logger tests
        env:
          PYTHONPATH: ./daemon:./sdk/python/src
        run: python -m pytest test/unit/logger/test_logger.py -v || echo "⚠️ Python logger tests failed"

      - name: Build and run C++ logger tests
        env:
          VCPKG_TOOLCHAIN_FILE: ${{ env.VCPKG_TOOLCHAIN_FILE }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          make -j$(nproc)
          timeout 30s ctest --output-on-failure -R logger || echo "⚠️ C++ logger tests failed or timed out"

      - name: Debug test discovery
        env:
          VCPKG_TOOLCHAIN_FILE: ${{ env.VCPKG_TOOLCHAIN_FILE }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
        run: |
          echo "Available unit tests:"
          find test/unit -type f
          echo "Available CTest labels:"
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          ctest -N

  handler-test:
    name: 🧪 Handler Stub Tests (C++)
    runs-on: ubuntu-latest
    needs: cpp-test
    steps:
      - uses: actions/checkout@v3

      - name: Setup vcpkg and install C++ dependencies
        run: |
          rm -rf vcpkg
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install nlohmann-json yaml-cpp spdlog gtest
          echo "VCPKG_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(pwd)/vcpkg/installed/x64-linux/share" >> $GITHUB_ENV

      - name: Install system build tools
        run: sudo apt update && sudo apt install -y cmake g++ libgtest-dev

      - name: Build handler test suite (from root)
        env:
          VCPKG_TOOLCHAIN_FILE: ${{ env.VCPKG_TOOLCHAIN_FILE }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          make -j$(nproc)

      - name: Run handler tests
        run: |
          cd build
          timeout 30s ctest --output-on-failure -R test_handlers || echo "❌ Handler tests failed or timed out (check output)"

  fsm-test:
    name: 🧪 FSM State Unit Tests
    runs-on: ubuntu-latest
    needs: cpp-test
    steps:
      - uses: actions/checkout@v3

      - name: Setup vcpkg and install C++ dependencies
        run: |
          rm -rf vcpkg
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install spdlog gtest yaml-cpp nlohmann-json
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(pwd)/vcpkg/installed/x64-linux/share" >> $GITHUB_ENV

      - name: Install system build tools
        run: sudo apt update && sudo apt install -y cmake g++ libgtest-dev

      - name: Build FSM test suite (from root)
        env:
          VCPKG_TOOLCHAIN_FILE: ${{ env.VCPKG_TOOLCHAIN_FILE }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          make -j$(nproc)

      - name: Run FSM state tests
        run: |
          cd build
          timeout 30s ctest --output-on-failure -R FSMStateUnitTests || echo "❌ FSM tests failed or timed out (check output)"
